class PaypalExpressController < ApplicationController

	def checkout
		setup_response = gateway.setup_purchase(current_basket.total_price*100,
			:ip => request.remote_ip,
			:return_url => url_for(:action => 'confirm', :only_path => false),
			:cancel_return_url => url_for(:controller => 'artists', :action => 'index', :only_path => false)
		)
		redirect_to gateway.redirect_url_for(setup_response.token)
	end

	def confirm
		@basket = current_basket
		customer_details = gateway.details_for(params[:token])
		session[:tokenID] = params[:token]
		session[:payerID] = params[:PayerID]
		if !customer_details.success?
			@message = details_response.message
			flash[:notice] = @message
			return
		end

		@address = customer_details.address
	end

	def purchase
		purchase = gateway.purchase(current_basket.total_price*100,
			:ip => request.remote_ip,
			:token => session[:tokenID],
			:payer_id => session[:payerID]
		)

		if purchase.success?
			notice = "Thanks! Your purchase is complete!"
			current_time = Time.now
			add_to_transaction_list(current_basket, current_time)
			session[:tokenID] = nil
			session[:payerID] = nil
			current_basket.update_attribute(:purchased_at, current_time)

		else
			notice = "Something went wrong. Paypal says: #{purchase.message}"
		end

		redirect_to root_url, :notice => notice

	end

	private
		def gateway
			@gateway ||= ActiveMerchant::Billing::PaypalExpressGateway.new(
 				:login => "hnk.se_1353422500_biz_api1.gmail.com",
        			:password => "1353422522",
        			:signature => "AX1hf7ieLndL6Uo4dgh53KbHnoMfAIoicVf0y9TlR3WvQ62Tl8s8z4UV"
			)
		end

		def add_to_purchased_list
			current_basket.line_items.each do |line_item| 
				current_account.user.purchases.create(track_id: line_item.track.id)
			end
		end

		def add_to_transaction_list(basket, purchasedTime)
			transaction = Transaction.new(
				:user => current_user,
				:user_ip => request.remote_ip,
				:purchased_at => purchasedTime
			)

			basket.line_items.each_with_index do |item, index|
				transaction.tracks[index] = item.track
			end

			transaction.save
		end

end
